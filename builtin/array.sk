# TODO: Move to Array::
BYTES_OF_PTR = 8  # Assuming 64bit env

class Array<T>
  def initialize(capa: Int)
    var @capa = capa
    var @n_items = 0
    var @items = Shiika::Internal::Memory.gc_malloc(BYTES_OF_PTR * capa)
  end

# TODO #147: Generic methods
#  def each<U>(f: Fn1<T, U>)
#    var i = 0; while i < @n_items
#      f.call(nth(i))
#      i = i + 1
#    end
#  end

  def push(value: Object)  # TODO: value is T
    if @n_items == @capa
      puts "TODO #107: resize"
    end
    ptr = @items + @n_items * BYTES_OF_PTR
    ptr.store(value)
    @n_items = @n_items + 1
  end

  # TODO #155: rename to `#[]`
  def nth(i: Int) -> T
    if i < 0
      puts "[Array#nth: index less than zero]"
    end
    if i >= @n_items
      puts "[Array#nth: index too large]"
    end
    (@items + i * BYTES_OF_PTR).load 
  end

  def first -> T
    ptr = @items
    ptr.load
  end
end
